

// ignore_for_file: unused_import
import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:video_thumbnail/video_thumbnail.dart';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import 'package:video_thumbnail/video_thumbnail.dart';
import 'package:path_provider/path_provider.dart';
import '../../../../constants.dart';

class videoPage extends StatefulWidget {
  const videoPage({ Key? key }) : super(key: key);

  @override
  State<videoPage> createState() => _videoPageState();
}

class _videoPageState extends State<videoPage> {
       List _video = [];
    List _nat = [];
    late Future resultsLoaded;
    String? _thumbnailUrl;

     @override
  void initState() {
    super.initState();
     generateThumbnail();
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
   resultsLoaded = getDomVisURL();
  }


        getDomVisURL() async {

    var dataDom=  await FirebaseFirestore.instance.collection('VideoLinks').get();

   
   setState(() {
     _video =dataDom.docs;
   });
   
    return "complete";
  }
   void generateThumbnail() async {


    _thumbnailUrl = await VideoThumbnail.thumbnailFile(
        video:
            "https://flutter.github.io/assets-for-api-docs/assets/videos/butterfly.mp4",
        thumbnailPath: (await getTemporaryDirectory()).path,
        imageFormat: ImageFormat.WEBP);

    setState(() {});
  }

  @override
  Widget build(BuildContext context) {



    return Scaffold(
      appBar: AppBar(
        title: Text("Videos"),
               
      ),
      body: ListView.builder(

          itemCount: _video.length,
          itemBuilder: (context, index){
            return RawMaterialButton(
              onPressed: () { },
              child: Padding(
                padding: const EdgeInsets.all(18.0),
                child: SizedBox(
                  height: 200,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    mainAxisSize: MainAxisSize.max,
                    
                                   children: [
                                    Expanded(
                                      flex: 3,
                                      child: Container(
                                      child: Column(
                                        children: [
                                           if (_thumbnailUrl != null)
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text("Thumbnail using Video url :"),
                      SizedBox(
                        height: 10,
                      ),
                      Stack(
                        alignment: Alignment.center,
                        children: [
                          Image.file(File(_thumbnailUrl!)),
                          CircleAvatar(
                            radius: 30,
                            backgroundColor: Colors.black45,
                            child: Icon(
                              Icons.play_arrow,
                              size: 40,
                              color: Colors.white,
                            ),
                          )
                        ],
                      )
                    ],
                  ),
                                        ],
                                      )
                                      )
                                       ),
                                       Expanded(
                                      flex: 1,
                                      child: Container(
                                        child: Text("${_video[index]['Name']}"),
                                      ) )
                                   ],
                                 ),
                ),
              ),
                   );
              
              
              
               
               
                 
               
            
          },
        )
    );
  }
} 

SizedBox(height: height/25),
              Text(
                'LOGIN',
                style: TextStyle(
                    color: Colors.black,
                    fontSize: MediaQuery.of(context).size.width * 0.10),
              ),
              SizedBox(height: 15),
              Text(
                'connectez-vous \navec votre email et votre mot de passe',
                textAlign: TextAlign.center,
              ),
              SizedBox(height: height/9),
              LoginForm(),
              SizedBox(height: height/11),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    "Donâ€™t have an account? ",
                    style: TextStyle(fontSize: 13.5),
                  ),
                  GestureDetector(
                    onTap: () => Navigator.push(context,
                        MaterialPageRoute(builder: (context) => SignUpScreen())),
                    child: Text(
                      "Sign Up",
                      style: TextStyle(
                        fontSize: 13.5,
                        color: Color(0xFFFF7643),
                      ),
                    ),
                  )
                ],
              )

              
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fabb/auth.dart';
import 'package:fabb/constants.dart';
import 'package:fabb/pages/home_app/home_2.dart';
import 'package:fabb/pages/home_app/home_pages/Equipe_detail/equipes_page.dart';
import 'package:fabb/pages/home_app/home_screen.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import '../../default_button.dart';
import '../sign_up/sign_up_screen.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';

class LoginForm extends StatefulWidget {
  const LoginForm({Key? key}) : super(key: key);

  @override
  _LoginFormState createState() => _LoginFormState();
}

class _LoginFormState extends State<LoginForm> {

final Auth auth = Auth();
















  final _formKey = GlobalKey<FormState>();
  late String email;
  late String password;
   final List<String> errors = [];
  final RegExp emailValidatorRegExp =
      RegExp(r"^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\.[a-zA-Z]+");
  @override
  Widget build(BuildContext context) {
     var size,height,width;
         size = MediaQuery.of(context).size;
    height = size.height;
    width = size.width;
    Widget cancelButton = TextButton(
    child: Text("Cancel"),
    onPressed:  () {
      Navigator.pop(context);
    },
  );
   AlertDialog alert = AlertDialog(
    title: Text("Erreur!"),
    content: Text("Utilisateur pas trouver"),
    actions: [
      cancelButton,
   
    ],
  );

    
    return Form(
      key: _formKey,
      child: Expanded(
        child: Column(children: [
          emailMethod(),
          SizedBox(height: height/17),
          MotpassMethod(),
          SizedBox(height: height/17),
          SizedBox(height: height/19),
          DefaultButton(
            text: "Continue",
            press: () async {
              if (_formKey.currentState!.validate()) {
                _formKey.currentState!.save();
              }
             
               User? user = await auth.login(email: email, password: password, context: context);
      
               if (user != null) {
      Navigator.pop(context);
                      return    Navigator.pushReplacement<void, void>(
          context,
          MaterialPageRoute<void>(
        builder: (BuildContext context) => const Home2(),
          ),
        );
               }else{
                             return    showDialog(
          context: context,
          builder: (BuildContext context) {
        return alert;
          },
        );
               }
      
      
      
      
      
      
            },
          ),
        ]),
      ),
    );
  }

  TextFormField MotpassMethod() {
    return TextFormField(
      obscureText: true,
      onSaved: (newValue) => password = newValue!,
      onChanged: (value) {
        if (value.isNotEmpty &&
            errors.contains("veulliez Entez Votre mot de pass")) {
          setState(() {
            errors.remove("veulliez Entez Votre mot de pass");
          });
        } else if (value.length >= 8 &&
            errors.contains("veulliez Entez Votre mot de pass")) {
          setState(() {
            errors.remove("veulliez Entez Votre mot de pass");
          });
        }
        return null;
      },
      validator: (value) {
        if (value!.isEmpty &&
            !errors.contains("veulliez Entez Votre mot de pass")) {
          setState(() {
            errors.add("veulliez Entez Votre mot de pass");
          });
        } else if (value.length < 8 &&
            !errors.contains("veulliez Entez Votre mot de pass")) {
          setState(() {
            errors.add("veulliez Entez Votre mot de pass");
          });
        }
        return null;
      },
      decoration: InputDecoration(
        labelText: "Mot De Pass",
        hintText: "Entez votre Mot De Pass",
        floatingLabelBehavior: FloatingLabelBehavior.always,
        suffixIcon: InputAREA(
          svgIcon: 'asset/Lock.svg',
        ),
        contentPadding: EdgeInsets.symmetric(
          horizontal: 42,
          vertical: 20,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(28),
          borderSide: BorderSide(color: Color.fromARGB(255, 170, 169, 169)),
          gapPadding: 10,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(28),
          borderSide: BorderSide(color: Color.fromARGB(255, 170, 169, 169)),
          gapPadding: 10,
        ),
      ),
    );
  }

  TextFormField emailMethod() {
    return TextFormField(
      keyboardType: TextInputType.emailAddress,
      onSaved: (newValue) => email = newValue!,
      onChanged: (value) {
        if (value.isNotEmpty &&
            !errors.contains("veulliez Entez Votre Email")) {
          setState(() {
            errors.remove("veulliez Entez Votre Email");
          });
        } else if (emailValidatorRegExp.hasMatch(value) &&
            errors.contains("veulliez Entez Votre Email")) {
          setState(() {
            errors.remove("veulliez Entez Votre Email");
          });
        }
        return null;
      },
      validator: (value) {
        if (value!.isEmpty && !errors.contains("veulliez Entez Votre Email")) {
          setState(() {
            errors.add("veulliez Entez Votre Email");
          });
        } else if (!emailValidatorRegExp.hasMatch(value) &&
            !errors.contains("veulliez Entez Votre Email")) {
          setState(() {
            errors.add("veulliez Entez Votre Email");
          });
        }
        return null;
      },
      decoration: InputDecoration(
        labelText: "Email",
        hintText: "Entez votre Email",
        floatingLabelBehavior: FloatingLabelBehavior.always,
        suffixIcon: InputAREA(
          svgIcon: 'asset/Mail.svg',
        ),
        contentPadding: EdgeInsets.symmetric(
          horizontal: 42,
          vertical: 20,
        ),
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(28),
          borderSide: BorderSide(color: Color.fromARGB(255, 170, 169, 169)),
          gapPadding: 10,
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(28),
          borderSide: BorderSide(color: Color.fromARGB(255, 170, 169, 169)),
          gapPadding: 10,
        ),
      ),
    );
  }
}

class FormError extends StatelessWidget {
  const FormError({
    Key? key,
    required this.errors,
  }) : super(key: key);

  final List<String> errors;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: List.generate(
          errors.length, (index) => FormErrorText(error: errors[index])),
    );
  }

  // ignore: non_constant_identifier_names
  Row FormErrorText({required String error}) {
    return Row(
      children: [
        SvgPicture.asset(
          "asset/Error.svg",
          height: 14,
          width: 14,
        ),
        SizedBox(width: 10),
        Text(error),
      ],
    );
  }
}

class InputAREA extends StatelessWidget {
  const InputAREA({
    Key? key,
    required this.svgIcon,
  }) : super(key: key);

  final String svgIcon;
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(0, 20, 20, 20),
      child: SvgPicture.asset(
        svgIcon,
        height: 18,
      ),
    );
  }
}